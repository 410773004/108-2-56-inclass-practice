)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
knitr::opts_chunk$set(echo = TRUE)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
f(w) -> x
?sort
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?!弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
str_split(context_picked,"\\s{2}") -> context_picked_split
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section -> sections
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section -> sections
pick_p2 <- sections == "P2"
semiGodsSemiDevils$data[[1]]$text[pick_p2] -> context_picked
# context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s{2}") -> context_picked_split
# context_picked_split
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?!弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
# mention_duan
mention_duan
table(mention_duan)
str(mention_duan)
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
str(mention_duan)
# mention_duan
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?!弟)"
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?!弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
str(mention_duan)
# mention_duan
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(!弟)"
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(!弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
str(mention_duan)
# mention_duan
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?弟)"
str_extract_all(context_picked_split[[1]], pattern = pattern) -> mention_duan
pattern <- "姓?段(譽|兄|兄弟|大哥|公子|相公|君|的小子)(?!弟)"
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
region
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
region
levels(region)<-c(中部,北部,台東,花蓮)
levels(region)<-c("中部","北部","東","東")
region
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") %>%
.->levels(region)
") %>%
levels(region) %>%
str_replace(.,"台北","北部") %>%
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部")->levels(region)
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
num>50 %>%
num[.]
(num>50) %>%
num[.]
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
setLevels
cities
sort(cities )
sort(cities,decreasing = T )
sort(cities,decreasing = F )
sort(cities,decreasing = T )
sort(cities)
population %>%
names(sort(.)) %>%
factor(cities, levels=.) -> cities
population %>%
sort() %>%
names() %>%
factor(cities,levels=.) %>%
sort()
population %>%
{names(sort(.))} %>%
factor(cities, levels=.) -> cities
map(dataList, is.numeric) -> results
library(purrr)
map(dataList, is.numeric) -> results
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
results
dataList <- list(
num=c(2,97,22,15,"7"),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
results
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
results
unlist(results) -> pick_numeric
pick_numeric
str(results)
str(pick_numeric)
map(dataList, is.numeric) -> results
str(results)
unlist(results) -> pick_numeric
str(pick_numeric)
dataList[pick_numeric] -> num_element
str(num_element)
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
bigNumber
(num_element[1] > 50) -> pick_big
map(datalist,~is.numeric(.x))
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(datalist,~is.numeric(.x))
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(datalist,~is.numeric(.x))
map(datalist,~is.numeric(.x))=f
map(datalist,~is.numeric(.x))->f
map(datalist,~is.numeric(.x))->
datalist
map(datalist,~is.numeric(.x))->
datalist
map(datalist,~is.numeric(.x))->
datalist
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList,~is.numeric(.x)) %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
datalist()
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList()
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[]
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[].
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.]
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
.[[1]]
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
.[[1]]>50 %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
.[[1]]>50 %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
.[[1]]>50 %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{ .[[1]]>50} %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{.[[1]]>50} %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{.[[1]]>50} %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{(.[[1]]>50)} %>%
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{(.[[1]]>50)} %>%
num_element[[1]][.]
map(dataList,~is.numeric(.x)) %>%
unlist() %>%
dataList[.] %>%
{(.[[1]]>50)} %>%
num_element[[1]][.]
knitr::opts_chunk$set(echo = TRUE)
n<- 540
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
result <-
{
x <- 2
y <- 3
x**y+15
}
print(result)
result2 <-
{
x <- 2
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
print(result2)
cut(x, c(a,b,c))
a <- c(1,2,3)
a <- c(1,2,3)
cut(x, c(a,b,c))
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
grade %>% cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace=T)
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
install.packages("magrittr")
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
knitr::opts_chunk$set(echo = TRUE)
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
install.packages("magrittr")
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
library(magrittr)
library(magrittr)
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
